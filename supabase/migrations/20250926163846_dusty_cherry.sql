/*
  # Create Stripe subscription and order tables

  1. New Tables
    - `stripe_user_subscriptions`
      - `id` (uuid, primary key)
      - `user_id` (uuid, foreign key to auth.users)
      - `customer_id` (text)
      - `subscription_id` (text)
      - `subscription_status` (text)
      - `price_id` (text)
      - `current_period_start` (timestamptz)
      - `current_period_end` (timestamptz)
      - `cancel_at_period_end` (boolean)
      - `payment_method_brand` (text)
      - `payment_method_last4` (text)
      - `created_at` (timestamptz)
      - `updated_at` (timestamptz)
    
    - `stripe_user_orders`
      - `id` (bigint, primary key)
      - `user_id` (uuid, foreign key to auth.users)
      - `customer_id` (text)
      - `checkout_session_id` (text)
      - `payment_intent_id` (text)
      - `amount_subtotal` (numeric)
      - `amount_total` (numeric)
      - `currency` (text)
      - `payment_status` (text)
      - `order_status` (text)
      - `order_date` (timestamptz)
      - `created_at` (timestamptz)
      - `updated_at` (timestamptz)

  2. Security
    - Enable RLS on both tables
    - Add policies for users to manage their own data
*/

-- Create stripe_user_subscriptions table
CREATE TABLE IF NOT EXISTS public.stripe_user_subscriptions (
    id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id uuid REFERENCES auth.users(id) ON DELETE CASCADE,
    customer_id text,
    subscription_id text,
    subscription_status text,
    price_id text,
    current_period_start timestamp with time zone,
    current_period_end timestamp with time zone,
    cancel_at_period_end boolean,
    payment_method_brand text,
    payment_method_last4 text,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now()
);

ALTER TABLE public.stripe_user_subscriptions ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Users can view their own subscriptions" ON public.stripe_user_subscriptions
  FOR SELECT USING (auth.uid() = user_id);

CREATE POLICY "Users can insert their own subscriptions" ON public.stripe_user_subscriptions
  FOR INSERT WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Users can update their own subscriptions" ON public.stripe_user_subscriptions
  FOR UPDATE USING (auth.uid() = user_id);

-- Create stripe_user_orders table
CREATE TABLE IF NOT EXISTS public.stripe_user_orders (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id uuid REFERENCES auth.users(id) ON DELETE CASCADE,
    customer_id text,
    checkout_session_id text,
    payment_intent_id text,
    amount_subtotal numeric,
    amount_total numeric,
    currency text,
    payment_status text,
    order_status text,
    order_date timestamp with time zone,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now()
);

ALTER TABLE public.stripe_user_orders ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Users can view their own orders" ON public.stripe_user_orders
  FOR SELECT USING (auth.uid() = user_id);

CREATE POLICY "Users can insert their own orders" ON public.stripe_user_orders
  FOR INSERT WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Users can update their own orders" ON public.stripe_user_orders
  FOR UPDATE USING (auth.uid() = user_id);